// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: ChunksTest.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Chunks {

  /// <summary>Holder for reflection information generated from ChunksTest.proto</summary>
  public static partial class ChunksTestReflection {

    #region Descriptor
    /// <summary>File descriptor for ChunksTest.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ChunksTestReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChBDaHVua3NUZXN0LnByb3RvEgZDaHVua3MiLgoRVGVzdFNpbXBsZU1lc3Nh",
            "Z2USDAoEbmFtZRgBIAEoCRILCgNudW0YAiABKAUijAEKCUNodW5rQmFzZRIO",
            "CgZjb25uSUQYASABKA0SDQoFb2JqSUQYAiABKAUSEQoJY2h1bmt0eXBlGAMg",
            "ASgFEhYKDmZpeGVkVGltZVN0YW1wGAQgASgDEhIKCnRpY2tOdW1iZXIYBSAB",
            "KA0SEAoIc2VuZFR5cGUYBiABKA0SDwoHY29udGVudBgHIAEoDCIwCghMaXN0",
            "VGVzdBIkCgRsaXN0GAEgAygLMhYuQ2h1bmtzLlZlY3RvcjNNZXNzYWdlIsQB",
            "ChlQcm9qZWN0aWxlT2JqZWN0U3luY0NodW5rEigKCHBvc2l0aW9uGAEgASgL",
            "MhYuQ2h1bmtzLlZlY3RvcjNNZXNzYWdlEigKCHZlbG9jaXR5GAIgASgLMhYu",
            "Q2h1bmtzLlZlY3RvcjNNZXNzYWdlEiUKBWZvcmNlGAMgASgLMhYuQ2h1bmtz",
            "LlZlY3RvcjNNZXNzYWdlEhMKC2lzS2luZW1hdGljGAQgASgIEhcKD21hZ2lj",
            "YWxFeHRyYU9uZRgFIAEoBSIxCg5WZWN0b3IzTWVzc2FnZRIJCgF4GAEgASgC",
            "EgkKAXkYAiABKAISCQoBehgDIAEoAmIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Chunks.TestSimpleMessage), global::Chunks.TestSimpleMessage.Parser, new[]{ "Name", "Num" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Chunks.ChunkBase), global::Chunks.ChunkBase.Parser, new[]{ "ConnID", "ObjID", "Chunktype", "FixedTimeStamp", "TickNumber", "SendType", "Content" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Chunks.ListTest), global::Chunks.ListTest.Parser, new[]{ "List" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Chunks.ProjectileObjectSyncChunk), global::Chunks.ProjectileObjectSyncChunk.Parser, new[]{ "Position", "Velocity", "Force", "IsKinematic", "MagicalExtraOne" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Chunks.Vector3Message), global::Chunks.Vector3Message.Parser, new[]{ "X", "Y", "Z" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class TestSimpleMessage : pb::IMessage<TestSimpleMessage> {
    private static readonly pb::MessageParser<TestSimpleMessage> _parser = new pb::MessageParser<TestSimpleMessage>(() => new TestSimpleMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TestSimpleMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Chunks.ChunksTestReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestSimpleMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestSimpleMessage(TestSimpleMessage other) : this() {
      name_ = other.name_;
      num_ = other.num_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestSimpleMessage Clone() {
      return new TestSimpleMessage(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "num" field.</summary>
    public const int NumFieldNumber = 2;
    private int num_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Num {
      get { return num_; }
      set {
        num_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TestSimpleMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TestSimpleMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Num != other.Num) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Num != 0) hash ^= Num.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Num != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Num);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Num != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Num);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TestSimpleMessage other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Num != 0) {
        Num = other.Num;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            Num = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ChunkBase : pb::IMessage<ChunkBase> {
    private static readonly pb::MessageParser<ChunkBase> _parser = new pb::MessageParser<ChunkBase>(() => new ChunkBase());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChunkBase> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Chunks.ChunksTestReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChunkBase() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChunkBase(ChunkBase other) : this() {
      connID_ = other.connID_;
      objID_ = other.objID_;
      chunktype_ = other.chunktype_;
      fixedTimeStamp_ = other.fixedTimeStamp_;
      tickNumber_ = other.tickNumber_;
      sendType_ = other.sendType_;
      content_ = other.content_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChunkBase Clone() {
      return new ChunkBase(this);
    }

    /// <summary>Field number for the "connID" field.</summary>
    public const int ConnIDFieldNumber = 1;
    private uint connID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ConnID {
      get { return connID_; }
      set {
        connID_ = value;
      }
    }

    /// <summary>Field number for the "objID" field.</summary>
    public const int ObjIDFieldNumber = 2;
    private int objID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ObjID {
      get { return objID_; }
      set {
        objID_ = value;
      }
    }

    /// <summary>Field number for the "chunktype" field.</summary>
    public const int ChunktypeFieldNumber = 3;
    private int chunktype_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Chunktype {
      get { return chunktype_; }
      set {
        chunktype_ = value;
      }
    }

    /// <summary>Field number for the "fixedTimeStamp" field.</summary>
    public const int FixedTimeStampFieldNumber = 4;
    private long fixedTimeStamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long FixedTimeStamp {
      get { return fixedTimeStamp_; }
      set {
        fixedTimeStamp_ = value;
      }
    }

    /// <summary>Field number for the "tickNumber" field.</summary>
    public const int TickNumberFieldNumber = 5;
    private uint tickNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TickNumber {
      get { return tickNumber_; }
      set {
        tickNumber_ = value;
      }
    }

    /// <summary>Field number for the "sendType" field.</summary>
    public const int SendTypeFieldNumber = 6;
    private uint sendType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SendType {
      get { return sendType_; }
      set {
        sendType_ = value;
      }
    }

    /// <summary>Field number for the "content" field.</summary>
    public const int ContentFieldNumber = 7;
    private pb::ByteString content_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChunkBase);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChunkBase other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ConnID != other.ConnID) return false;
      if (ObjID != other.ObjID) return false;
      if (Chunktype != other.Chunktype) return false;
      if (FixedTimeStamp != other.FixedTimeStamp) return false;
      if (TickNumber != other.TickNumber) return false;
      if (SendType != other.SendType) return false;
      if (Content != other.Content) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ConnID != 0) hash ^= ConnID.GetHashCode();
      if (ObjID != 0) hash ^= ObjID.GetHashCode();
      if (Chunktype != 0) hash ^= Chunktype.GetHashCode();
      if (FixedTimeStamp != 0L) hash ^= FixedTimeStamp.GetHashCode();
      if (TickNumber != 0) hash ^= TickNumber.GetHashCode();
      if (SendType != 0) hash ^= SendType.GetHashCode();
      if (Content.Length != 0) hash ^= Content.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ConnID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ConnID);
      }
      if (ObjID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ObjID);
      }
      if (Chunktype != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Chunktype);
      }
      if (FixedTimeStamp != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(FixedTimeStamp);
      }
      if (TickNumber != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(TickNumber);
      }
      if (SendType != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(SendType);
      }
      if (Content.Length != 0) {
        output.WriteRawTag(58);
        output.WriteBytes(Content);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ConnID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ConnID);
      }
      if (ObjID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ObjID);
      }
      if (Chunktype != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Chunktype);
      }
      if (FixedTimeStamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(FixedTimeStamp);
      }
      if (TickNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TickNumber);
      }
      if (SendType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SendType);
      }
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Content);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChunkBase other) {
      if (other == null) {
        return;
      }
      if (other.ConnID != 0) {
        ConnID = other.ConnID;
      }
      if (other.ObjID != 0) {
        ObjID = other.ObjID;
      }
      if (other.Chunktype != 0) {
        Chunktype = other.Chunktype;
      }
      if (other.FixedTimeStamp != 0L) {
        FixedTimeStamp = other.FixedTimeStamp;
      }
      if (other.TickNumber != 0) {
        TickNumber = other.TickNumber;
      }
      if (other.SendType != 0) {
        SendType = other.SendType;
      }
      if (other.Content.Length != 0) {
        Content = other.Content;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ConnID = input.ReadUInt32();
            break;
          }
          case 16: {
            ObjID = input.ReadInt32();
            break;
          }
          case 24: {
            Chunktype = input.ReadInt32();
            break;
          }
          case 32: {
            FixedTimeStamp = input.ReadInt64();
            break;
          }
          case 40: {
            TickNumber = input.ReadUInt32();
            break;
          }
          case 48: {
            SendType = input.ReadUInt32();
            break;
          }
          case 58: {
            Content = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ListTest : pb::IMessage<ListTest> {
    private static readonly pb::MessageParser<ListTest> _parser = new pb::MessageParser<ListTest>(() => new ListTest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListTest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Chunks.ChunksTestReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListTest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListTest(ListTest other) : this() {
      list_ = other.list_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListTest Clone() {
      return new ListTest(this);
    }

    /// <summary>Field number for the "list" field.</summary>
    public const int ListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Chunks.Vector3Message> _repeated_list_codec
        = pb::FieldCodec.ForMessage(10, global::Chunks.Vector3Message.Parser);
    private readonly pbc::RepeatedField<global::Chunks.Vector3Message> list_ = new pbc::RepeatedField<global::Chunks.Vector3Message>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Chunks.Vector3Message> List {
      get { return list_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListTest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListTest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!list_.Equals(other.list_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= list_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      list_.WriteTo(output, _repeated_list_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += list_.CalculateSize(_repeated_list_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListTest other) {
      if (other == null) {
        return;
      }
      list_.Add(other.list_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            list_.AddEntriesFrom(input, _repeated_list_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ProjectileObjectSyncChunk : pb::IMessage<ProjectileObjectSyncChunk> {
    private static readonly pb::MessageParser<ProjectileObjectSyncChunk> _parser = new pb::MessageParser<ProjectileObjectSyncChunk>(() => new ProjectileObjectSyncChunk());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProjectileObjectSyncChunk> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Chunks.ChunksTestReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProjectileObjectSyncChunk() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProjectileObjectSyncChunk(ProjectileObjectSyncChunk other) : this() {
      position_ = other.position_ != null ? other.position_.Clone() : null;
      velocity_ = other.velocity_ != null ? other.velocity_.Clone() : null;
      force_ = other.force_ != null ? other.force_.Clone() : null;
      isKinematic_ = other.isKinematic_;
      magicalExtraOne_ = other.magicalExtraOne_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProjectileObjectSyncChunk Clone() {
      return new ProjectileObjectSyncChunk(this);
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 1;
    private global::Chunks.Vector3Message position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Chunks.Vector3Message Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "velocity" field.</summary>
    public const int VelocityFieldNumber = 2;
    private global::Chunks.Vector3Message velocity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Chunks.Vector3Message Velocity {
      get { return velocity_; }
      set {
        velocity_ = value;
      }
    }

    /// <summary>Field number for the "force" field.</summary>
    public const int ForceFieldNumber = 3;
    private global::Chunks.Vector3Message force_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Chunks.Vector3Message Force {
      get { return force_; }
      set {
        force_ = value;
      }
    }

    /// <summary>Field number for the "isKinematic" field.</summary>
    public const int IsKinematicFieldNumber = 4;
    private bool isKinematic_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsKinematic {
      get { return isKinematic_; }
      set {
        isKinematic_ = value;
      }
    }

    /// <summary>Field number for the "magicalExtraOne" field.</summary>
    public const int MagicalExtraOneFieldNumber = 5;
    private int magicalExtraOne_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MagicalExtraOne {
      get { return magicalExtraOne_; }
      set {
        magicalExtraOne_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProjectileObjectSyncChunk);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProjectileObjectSyncChunk other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Position, other.Position)) return false;
      if (!object.Equals(Velocity, other.Velocity)) return false;
      if (!object.Equals(Force, other.Force)) return false;
      if (IsKinematic != other.IsKinematic) return false;
      if (MagicalExtraOne != other.MagicalExtraOne) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (position_ != null) hash ^= Position.GetHashCode();
      if (velocity_ != null) hash ^= Velocity.GetHashCode();
      if (force_ != null) hash ^= Force.GetHashCode();
      if (IsKinematic != false) hash ^= IsKinematic.GetHashCode();
      if (MagicalExtraOne != 0) hash ^= MagicalExtraOne.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (position_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Position);
      }
      if (velocity_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Velocity);
      }
      if (force_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Force);
      }
      if (IsKinematic != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsKinematic);
      }
      if (MagicalExtraOne != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(MagicalExtraOne);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (velocity_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Velocity);
      }
      if (force_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Force);
      }
      if (IsKinematic != false) {
        size += 1 + 1;
      }
      if (MagicalExtraOne != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MagicalExtraOne);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProjectileObjectSyncChunk other) {
      if (other == null) {
        return;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          Position = new global::Chunks.Vector3Message();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.velocity_ != null) {
        if (velocity_ == null) {
          Velocity = new global::Chunks.Vector3Message();
        }
        Velocity.MergeFrom(other.Velocity);
      }
      if (other.force_ != null) {
        if (force_ == null) {
          Force = new global::Chunks.Vector3Message();
        }
        Force.MergeFrom(other.Force);
      }
      if (other.IsKinematic != false) {
        IsKinematic = other.IsKinematic;
      }
      if (other.MagicalExtraOne != 0) {
        MagicalExtraOne = other.MagicalExtraOne;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (position_ == null) {
              Position = new global::Chunks.Vector3Message();
            }
            input.ReadMessage(Position);
            break;
          }
          case 18: {
            if (velocity_ == null) {
              Velocity = new global::Chunks.Vector3Message();
            }
            input.ReadMessage(Velocity);
            break;
          }
          case 26: {
            if (force_ == null) {
              Force = new global::Chunks.Vector3Message();
            }
            input.ReadMessage(Force);
            break;
          }
          case 32: {
            IsKinematic = input.ReadBool();
            break;
          }
          case 40: {
            MagicalExtraOne = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Vector3Message : pb::IMessage<Vector3Message> {
    private static readonly pb::MessageParser<Vector3Message> _parser = new pb::MessageParser<Vector3Message>(() => new Vector3Message());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Vector3Message> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Chunks.ChunksTestReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector3Message() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector3Message(Vector3Message other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector3Message Clone() {
      return new Vector3Message(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 3;
    private float z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Vector3Message);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Vector3Message other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Z, other.Z)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
      if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
      if (Z != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Z);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Z);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (Z != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Vector3Message other) {
      if (other == null) {
        return;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      if (other.Z != 0F) {
        Z = other.Z;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
          case 29: {
            Z = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
